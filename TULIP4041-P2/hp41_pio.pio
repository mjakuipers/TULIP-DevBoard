/*
 * hp41_pio.pio
 *
 * This file is part of the TULIP4041 project.
 * Copyright (C) 2024 Meindert Kuipers
 *
 * This is free software: you are free to change and redistribute it.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * USE AT YOUR OWN RISK
 *
 */

 // all pio state machines for the TUP project
 
 .program hp41_pio_sync

; ****************************************
; **   HP41 PIO interface 
; **   state machine for SYNC functions and ISA input
; **   (C) 2023 Meindert Kuipers
; ****************************************
; **
; ** main SYNC and inout for ISA INSTRUCTION and ISA ADDRESS
; ** pushing instruction and address bits in the RX FIFO
; ** FIFO access is non-blocking so we do not miss any clocks

; ** pins used:     
; **    inputs:     CLK01       GPIO12  GPIO07  HP41 CLK01 signal
; **                CLK02       GPIO13  GPIO08  HP41 CLK02 signal
; **                DATA        GPIO16  GPIO09  HP41 DATA signal
; **                ISA         GPIO14  GPIO10  HP41 ISA signal
; **                SYNC        GPIO15  GPIO11  HP41 SYNC signal
; **                T0_TIME     GPIO26, active low signal!
; **                                    is active low during DATA bit D0 between the rising edges of CLK02
; **                                    used to end DATA cycle and to issue the ISA carry bit when requested
; **                                    used for timing FI flag output
; **                SYNC_TIME   GPIO27, active during ISA INSTRUCTION, same as SYNC but at all cycles
; **                                    used for timing ISA INSTRUCTION output
; **   outputs:     ISA_OUT     GPIO18  GPIO14, ISA output signal (before level shifter)
; **                ISA_OE      GPIO19  GPIO19, ISA Output Enable (controlling the level shifter output)
; **                                    this is an active low signal!
; **    
; ** input pin base will be P_ISA (GPIO 14), we input ISA and one extra SYNC
; ** sideset pin base will be 26, this allows us to control T0_TIME and SYNC_TIME

; ** define the fixed signals (cannot be parameters)
.define P_CLK01         12
.define P_CLK02         13
.define P_SYNC          15
.define T0_TIME         26
.define SYNC_TIME       27

.side_set 2                                     ; 2 pins used for side_set T0_TIME and SYNC_TIME

public sync_start:                      ; for a forced jump after PWO event
        wait 1 gpio P_SYNC      side 1  ; wait for SYNC to go high, set T0_TIME and clear SYNC_TIME
                                        ; SYNC could already be high in light sleep (standby) but no clocks in that case
                                        ; so maybe wait for first CLK02 rising edge as well??
                                        ; now atT44, first rising edge of SYNC after PWO, sample ISA INSTRUCTION
.wrap_target
loop_main:                              ; main loop of the ISA/SYNC state machine  
        set x,9                 side 3  ; number of samples for ISA INSTRUCTION, set SYNC_TIME
loop_instr:
        wait 0 gpio P_CLK01     side 3  ; wait for CLK01 low
        wait 1 gpio P_CLK01     side 3  ; wait for rising edge of CLK01
        in pins,1               side 3  ; input 1 bit from ISA into the ISR
        jmp x-- loop_instr      side 3  ; decrement X and jump into the loop until x=0
        in pins,2               side 3  ; one last input to capture SYNC status

        push noblock            side 3  ; push the ISR to the Input FIFO, do not wait if full! ISR is clear
        wait 1 gpio P_CLK02     side 3  ; wait for rising edge of CLK02
                                        ; now at T54
        wait 0 gpio P_CLK02     side 1  ; wait for falling edge of CLK02, clear SYNC_TIME with sideset
        wait 1 gpio P_CLK02     side 1  ; wait for rising edge of CLK02, now at T55
        wait 0 gpio P_CLK02     side 1  ; wait for falling edge of CLK02
        wait 1 gpio P_CLK02     side 1  ; wait for rising edge of CLK02, now at T0
                                        ; this marks the start of T0

        wait 0 gpio P_CLK02     side 0  ; wait for falling edge of CLK02, drive T0_TIME low
        wait 1 gpio P_CLK02     side 0  ; wait for rising edge of CLK02, now at T1
                                        ; this is the end of the D0 bit time

                                        ; T0_TIME can be high now
        mov x, y                side 1  ; move Y into X, Y contains a counter until the start of SYNC_TIME
                                        ; ISR is then autopushed exactly at the end of the ISA ADDRESS
                                        ; autopush should be set to 28
                                        ; counter to be set to 29 + 13 = 42
                                        ; counter will be a forced instruction during state machine initialization
loop_addr:        
        wait 1 gpio P_CLK01     side 1  ; wait for rising edge of CLK01
        in pins,1               side 1  ; input 1 bit from ISA into the ISR
        wait 0 gpio P_CLK01     side 1  ; wait for falling edge of CLK01
        jmp x-- loop_addr       side 1  ; decrement X and jump into the loop until x=0       
                                        ; now just before SYNC_TIME
        wait 1 gpio P_CLK02     side 1  ; to wait for CLK012 rising edge        
                                        ; which marks the start of SYNC_TIME
.wrap                                   ; and use wrap to get back and set SYNC_TIME
; 21 instructions


//
// helper functions for hp41_pio_sync
//

% c-sdk {
static inline void hp41_pio_sync_program_init(PIO pio, uint sm, uint offset, 
        uint in_base_pin,               // base for input pin ISA and SYNC
        uint sideset_base_pin)          // base for sideset outputs T0_TIME and SYNC_TIME

{
    pio_sm_config c = hp41_pio_sync_program_get_default_config(offset);

    // IO mapping
    sm_config_set_in_pins(&c, in_base_pin);
    sm_config_set_sideset_pins(&c, sideset_base_pin);

    // Configure Input Shift Register ISR
    // Shifting to right matches HP41 bit order
    sm_config_set_in_shift(
        &c,
        true,   // Shift-to-right = true
        true,   // Autopush enabled, 
        29      // Autopush threshold = 29
    );

    // configure the clock divider here
    // not used in the SYNC state machine, runs at full speed
    // float clkdiv = 1;
    // sm_config_set_clkdiv(&c, clkdiv);

    // set correct pin direction for outputs
    pio_sm_set_consecutive_pindirs(pio, sm, sideset_base_pin, 2, true);      // pin direction 2 output pins T0_TIME and SYNC_TIME

    // connect the pins to the PIO for output
    pio_gpio_init(pio, sideset_base_pin);           // T0_TIME
    pio_gpio_init(pio, sideset_base_pin + 1);       // SYNC_TIME

    // load the configuration and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // and start the pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}

.program hp41_pio_datain

; ****************************************
; **   HP41 PIO interface
; **   state machine for DATA input and FI input
; **   (C) 2023 Meindert Kuipers
; ****************************************

; ** pushing the bits in the RX FIFO, threshold set at 32 to capture address at T32
; ** FIFO access is non-blocking so we never miss any clocks
; ** in any case C-level software must be fast enough to empty FIFO otherwise the DAT or FI will be out of sync

; ** pins used:     
; **    inputs:     CLK01       GPIO12  GPIO07  HP41 CLK01 signal
; **                CLK02       GPIO13  GPIO08  HP41 CLK02 signal
; **                DATA        GPIO16  GPIO09  HP41 DATA signal
; **                ISA         GPIO14  GPIO10  HP41 ISA signal
; **                SYNC        GPIO15  GPIO11  HP41 SYNC signal
; **                FI          GPIOxx          HP41 FI signal (for now temporary only)
; **                T0_TIME     GPIO26, active low signal!
; **                                    is active low during DATA bit D0 between the rising edges of CLK02
; **                                    used to end DATA cycle and to issue the ISA carry bit when requested
; **                                    used for timing FI flag output
; **                SYNC_TIME   GPIO27, active during ISA INSTRUCTION, same as SYNC but at all cycles
; **                                    used for timing ISA INSTRUCTION output

; ** input pin base will be 16, we only input DATA
; ** jmp pin base will be 26, this is T0_TIME

; ** define the fixed signals (cannot be parameters)
.define P_CLK01         12
.define P_CLK02         13
.define P_SYNC          15
.define T0_TIME         26
.define SYNC_TIME       27

data_s:
public data_start:                      ; for forcing a restart of this state machine on PWO
        wait 1 gpio SYNC_TIME           ; wait for SYNC_TIME to go high
                                        ; we then know that the sync/isa state machine is running
                                        ; and that there will be 12 data bits read
                                        ; this allows for more reliable sync when starting
.wrap_target                            ; free return to start
        wait 1 gpio P_CLK01             ; wait for rising edge of CLK01
        jmp pin, data_in                ; check T0_TIME pin, if high no action, continue to read DATA
                                        ; when T0_TIME is active (low) we need to push the ISR to the FIFO
                                        ; as we are at the end of the DATA cycle
        push noblock                    ; never block
data_in:
        in pins, 1            [15]      ; read DATA pin into ISR
                                        ; and wait until after the falling edge of CLK01
                                        ; and then into the next phase
.wrap                                   ; and start over again


; 5 instructions

//
// helper functions for hp41_pio_datain
//

% c-sdk {
static inline void hp41_pio_datain_program_init(PIO pio, uint sm, uint offset, 
        uint in_base_pin,               // base for input pin DATA / FI
        uint jmp_pin)                   // pin used in jmp, this will be T0_TIME
    
{
    pio_sm_config c = hp41_pio_datain_program_get_default_config(offset);

    sm_config_set_in_pins(&c, in_base_pin);
    sm_config_set_jmp_pin(&c, jmp_pin);  

    // Configure Input Shift Register ISR
    // Shifting to right matches HP41 bit order
    // for DATA and FI input autopush is enabled for the first 32 DATA bits
    // the remaining 24 bits are forced by a push
    sm_config_set_in_shift(
        &c,
        true,  // Shift-to-right = true
        true,  // Autopush enabled for pushing 32 databits
        32     // Autopush threshold = 32
    );

    // configure the clock to run at 12.5 MHz, clock divider is 10
    // one clockcycle is now 80 ns
     
    float clkdiv = 10;
    sm_config_set_clkdiv(&c, clkdiv);

    // load the configuration and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // and start the pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}


.program hp41_pio_debugout

; ****************************************
; **   HP41 PIO interface
; **   state machine for debug output 
; **   (C) 2023 Meindert Kuipers
; ****************************************

; **
; ** drive P_DEBUG for debugging to indicate position in core1 C-code
; ** simply autpull at 16 bits and output these
; ** best to always start and end with a 0 bit

; **
; ** pins used:
; **   output:  P_DEBUG      GPIO28  debug output

; ** out base will be P_DEBUG (GPIO28), no sideset_base_pin
; ** autopull to be set at 16

.wrap_target
        out pins, 1                     ; output data in ISR bit by bit 
                                        ; due to wrapping and autopull nothing else needed
.wrap
; 1 instruction
                
//
// helper functions for hp41_pio_debugout
//

% c-sdk {
static inline void hp41_pio_debugout_program_init(PIO pio, uint sm, uint offset, 
        uint out_base_pin,              // base for output pin P_DEBUG
        uint sideset_base_pin,          // (not used) base for sideset outputs ISA_OE
        uint set_base_pin,              // (not used) base for set pins
        uint jmp_pin)                   // (not used) pin used in jmp
    
{
    pio_sm_config c = hp41_pio_debugout_program_get_default_config(offset);

    // set correct pin direction for outputs
    pio_sm_set_consecutive_pindirs(pio, sm, out_base_pin, 1, true);          // pin direction for P_DEBUG

    sm_config_set_out_pins(&c, out_base_pin, 1);    // just using 1 output

    // Configure Output Shift Register OSR
    // Shifting to right matches HP41 bit order
    // for ISA output no autopush is needed
    sm_config_set_out_shift(
        &c,
        true,   // Shift-to-right = true
        true,   // Autopull enabled
        16      // Autopull threshold = 16
    );

    // connect the pins to the PIO for output
    pio_gpio_init(pio, out_base_pin);               // P_DEBUG

    // configure the clock to run at 12.5 MHz, clock divider is 10
    float clkdiv = 10;
    sm_config_set_clkdiv(&c, clkdiv);

    // load the configuration and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // and start the pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}


.program hp41_pio_isaout 

; ****************************************
; **   HP41 PIO interface
; **   state machine for ISA output (instruction and carry)
; **   (C) 2023 Meindert Kuipers
; ****************************************

; **
; ** ouput ISA for the following purpose:
; **   ISA instruction output
; **   ISA carry output at T0
; **   calculator wake-up (handled in C-code)

; ** pins used:     
; **    inputs:     CLK01       GPIO12  GPIO07  HP41 CLK01 signal
; **                CLK02       GPIO13  GPIO08  HP41 CLK02 signal
; **                DATA        GPIO16  GPIO09  HP41 DATA signal
; **                ISA         GPIO14  GPIO10  HP41 ISA signal
; **                SYNC        GPIO15  GPIO11  HP41 SYNC signal
; **                T0_TIME     GPIO26, active low signal!
; **                                    is active low during DATA bit D0 between the rising edges of CLK02
; **                                    used to end DATA cycle and to issue the ISA carry bit when requested
; **                                    used for timing FI flag output
; **                SYNC_TIME   GPIO27, active during ISA INSTRUCTION, same as SYNC but at all cycles
; **                                    used for timing ISA INSTRUCTION output
; **   outputs:     ISA_OUT     GPIO18  GPIO14, ISA output signal (before level shifter)
; **                ISA_OE      GPIO19  GPIO19, ISA Output Enable (controlling the level shifter output)
; **                                    this is an active high signal for the 40109 driver

; **    
; ** out base will be ISA_OUT (GPIO 18)
; ** sideset base will be ISA_OE (GPIO 19), 1 sideset signal only

; ** define the fixed signals (cannot be parameters)
.define P_CLK01         12
.define P_CLK02         13
.define P_SYNC          15
.define T0_TIME         26
.define SYNC_TIME       27

.side_set 1                                     ; one bit for sideset, this will be ISA_OE

.wrap_target 
public handle_carry:                            ; code to send out the carry bit at D0_TIME
        pull block              side 0          ; clear ISA_OE, wait for any data
                                                ; this is our parking spot to wait for either the carry bit
                                                ; send any data with 1's to the TX FIFO for a carry bit set
                                                ; send 0's to clear carry, but better not send anything
                                                ; do a forced jmp to isa_inst_out for INSTRUCTION output
        wait 0 gpio T0_TIME     side 0          ; wait until start of T0_TIME (remember, active low!)

        out pins, 1             side 1          ; set ISA_OUT and ISA_OE 
        wait 1 gpio T0_TIME     side 1          ; and wait for end of T0_TIME
        jmp handle_carry        side 0          ; back to parking space

                                                ; we get here only after a forced jump when 
                                                ; an ISA INSTRUCTION has to be sent
                                                ; C software has to force this state machine to its start
public isa_inst_out:
        pull block              side 0          ; get data to send into OSR, blocking, clear ISA_OE
        set x, 9                side 0          ; send 10 bits, set ISA_OE, now in ISA INSTRUCTION window
                                                ; move this instruction to C code?
        wait 1 gpio SYNC_TIME   side 0          ; wait for SYNC_TIME to go high                                                
public isa_out:
        out pins, 1             side 1  [15]    ; send 1 bit and delay until after the falling edge of CLK02
        wait 1 gpio P_CLK02     side 1          ; wait for rising edge of CLK02
        jmp x--, isa_out        side 1          ; next bit
        wait 0 gpio SYNC_TIME   side 1          ; wait for end of SYNC_TIME
.wrap                                           ; now fall into our parking spot prior to T0_TIME

; total 12 instructions

//
// helper functions for hp41_pio_isaout
//

% c-sdk {
static inline void hp41_pio_isaout_program_init(PIO pio, uint sm, uint offset, 
        uint out_base_pin,              // base for output pin ISA_OUT
        uint sideset_base_pin,          // base for sideset outputs ISA_OE
        uint set_base_pin,              // (not used) base for set pins
        uint jmp_pin)                   // (not used) pin used in jmp
    
{
    pio_sm_config c = hp41_pio_isaout_program_get_default_config(offset);

    // set correct pin direction for outputs
    pio_sm_set_consecutive_pindirs(pio, sm, out_base_pin, 1, true);          // pin direction for ISA_OUT
    pio_sm_set_consecutive_pindirs(pio, sm, sideset_base_pin, 1, true);      // pin direction for ISA_OE

    sm_config_set_out_pins(&c, out_base_pin, 1);    // just using 1 output
    sm_config_set_sideset_pins(&c, sideset_base_pin);
    // sm_config_set_jmp_pin(&c, jmp_pin);  

    // Configure Output Shift Register OSR
    // Shifting to right matches HP41 bit order
    // for ISA output no autopush is needed
    sm_config_set_out_shift(
        &c,
        true,   // Shift-to-right = true
        false,  // no Autopull
        32      // Autopull threshold = 32, not used here
    );

    // configure the clock to run at 12.5 MHz, clock divider is 10
    // one clockcycle is now 80 ns
    float clkdiv = 10;
    sm_config_set_clkdiv(&c, clkdiv);

    // connect the pins to the PIO for output
    pio_gpio_init(pio, out_base_pin);               // ISA_OUT
    pio_gpio_init(pio, sideset_base_pin);           // ISA_OE

    // load the configuration and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // and start the pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}


.program hp41_pio_dataout

; ****************************************
; **   HP41 PIO interface
; **   state machine for DATA output
; **   (C) 2023 Meindert Kuipers
; ****************************************

; ** pulling bits from the TX FIFO on autopull, only when data is to be sent
; ** then wait for T0_TIME to start sending until the next T0_TIME
; ** this state machine runs at 12.5 MHz with a clock divisor of 10 !!
; ** ensure that the main system clock is 125 MHz !!
; ** this saves one instruction

; ** pins used:       
; **    inputs:     CLK01       GPIO12  GPIO07  HP41 CLK01 signal
; **                CLK02       GPIO13  GPIO08  HP41 CLK02 signal
; **                DATA        GPIO16  GPIO09  HP41 DATA signal
; **                ISA         GPIO14  GPIO10  HP41 ISA signal
; **                SYNC        GPIO15  GPIO11  HP41 SYNC signal
; **                T0_TIME     GPIO26, active low signal!
; **                                    is active low during DATA bit D0 between the rising edges of CLK02
; **                                    used to end DATA cycle and to issue the ISA carry bit when requested
; **                                    used for timing FI flag output
; **                SYNC_TIME   GPIO27, active during ISA INSTRUCTION, same as SYNC but at all cycles
; **                                    used for timing ISA INSTRUCTION output
; **   outputs:     DATA_OUT    GPIO20, DATA output signal (before level shifter)
; **                DATA_OE     GPIO21, DATA Output Enable (controlling the level shifter output)
; **                                    this is an active high signal for the 40109 driver

; **    
; ** out base will be DATA_OUT (GPIO 13)
; ** sideset base will be DATA_OE (GPIO 20), 1 sideset signal only
; ** jmp base is T0_TIME (GPIO 26) to end the cycle

; ** define the fixed signals (cannot be parameters)
.define P_CLK01         12
.define P_CLK02         13
.define P_SYNC          15
.define T0_TIME         26
.define SYNC_TIME       27

.side_set 1
.wrap_target 
        pull block              side 0          ; blocking wait for DATA to arrive in the TX FIFO
                                                ; TX FIFO set to autopull at 32 bits
                                                ; with DATA_OE as sideset driven high, so no output
                                                ; fall through whenever data arrives                                      
        wait 0 gpio T0_TIME     side 0          ; wait until start of T0_TIME 
data_out_go:
        out pins, 1             side 1  [15]    ; send out DATA bit from the ISR
                                                ; delay with 15 clocks = 15* 80 ns = 1200 ns
                                                ; more than enough to pass over the 700+ ns CLK02 high time
                                                ; at this point CLK02 is low
        wait 1 gpio P_CLK02     side 1          ; wait for CLK02 to go high, start of next bit
        jmp pin, data_out_go    side 1          ; when T0_TIME is high go to next bit
                                                ; ISR set to autopull, no need to count
                                                ; fall through upon T0_TIME low, this is the end of the DATA cycle
.wrap   

; total 5 instructions
//
// helper functions for hp41_pio_dataout
//

% c-sdk {
static inline void hp41_pio_dataout_program_init(PIO pio, uint sm, uint offset, 
        uint out_base_pin,              // base for output pin DATA_OUT
        uint sideset_base_pin,          // base for sideset outputs DATA_OE
        uint jmp_pin)                   // (pin used in jmp, T0_TIME
    
{
    pio_sm_config c = hp41_pio_dataout_program_get_default_config(offset);

    // set correct pin direction for outputs
    pio_sm_set_consecutive_pindirs(pio, sm, out_base_pin, 1, true);          // pin direction for DATA_OUT
    pio_sm_set_consecutive_pindirs(pio, sm, sideset_base_pin, 1, true);      // pin direction for DATA_OE

    sm_config_set_out_pins(&c, out_base_pin, 1);    // just using 1 output
    sm_config_set_sideset_pins(&c, sideset_base_pin);
    sm_config_set_jmp_pin(&c, jmp_pin);  

    // Configure Output Shift Register OSR
    // Shifting to right matches HP41 bit order
    // for DATA output autopull is needed
    sm_config_set_out_shift(
        &c,
        true,   // Shift-to-right = true (lsb first)
        true,   // Autopull = true
        32      // Autopull threshold = 32
    );

    // configure the clock to run at 12.5 MHz, clock divider is 10
    // one clockcycle is now 80 ns
    float clkdiv = 10;
    sm_config_set_clkdiv(&c, clkdiv);

    // connect the pins to the PIO for output
    pio_gpio_init(pio, out_base_pin);               // DATA_OUT
    pio_gpio_init(pio, sideset_base_pin);           // DATA_OE

    // load the configuration and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // and start the pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}


.program hp41_pio_fiout

; ****************************************
; **   HP41 PIO interface
; **   state machine for FI output
; **   (C) 2023 Meindert Kuipers
; ****************************************

; ** same as data_out state machine
; ** main difference is that we drive the FI Output Enable
; ** FI out should be pulled high

; ** pins used:         
; **    inputs:     CLK01       GPIO12  GPIO07  HP41 CLK01 signal
; **                CLK02       GPIO13  GPIO08  HP41 CLK02 signal
; **                DATA        GPIO16  GPIO09  HP41 DATA signal
; **                ISA         GPIO14  GPIO10  HP41 ISA signal
; **                SYNC        GPIO15  GPIO11  HP41 SYNC signal
; **                T0_TIME     GPIO26, active low signal!
; **                                    is active low during DATA bit D0 between the rising edges of CLK02
; **                                    used to end DATA cycle and to issue the ISA carry bit when requested
; **                                    used for timing FI flag output
; **                SYNC_TIME   GPIO27, active during ISA INSTRUCTION, same as SYNC but at all cycles
; **                                    used for timing ISA INSTRUCTION output
; **   output:      FI_OE       GPIO22, FI Output Enable (controlling the level shifter output)
; **                                    this is an active high signal!
; **                                    the FI output itself is tied to ground
; **                                    this means that 1's must be written for an active FI output
; **                                    during the desired digit time, and 0's for inactive output
; **                                    default is the OE driven high/pulled up
; **                                    last bit to output must be a '0'

; **    
; ** out base will be FI_OE (GPIO 22)
; ** jmp base is T0_TIME (GPIO 26) to end the cycle

; ** this state machine runs at 12.5 MHz with a clock divisor of 10 !!
; ** ensure that the main system clock is 125 MHz !!
; ** this saves one instruction

; ** the C level program needs to make certain that the TF FIFO is filled until
; ** the interrrupts are all served

; ** this state machine is almost identical to the dataout state machine
; ** only the FI_OE is driven here, and there is no sideset
; ** The OE is an active high signal, should be low at all times when not used
; ** to drive a flag, send a pattern to the TX FIFO with 0b0001 in the relevant digit time
; ** all other bits must be 1's

; ** define the fixed signals (cannot be parameters)
.define P_CLK01         12
.define P_CLK02         13
.define P_SYNC          15
.define T0_TIME         26
.define SYNC_TIME       27

.wrap_target 
public fiout_start:
        pull block                              ; blocking wait for data to arrive in the TX FIFO
                                                ; TX FIFO set to autopull at 32 bits
                                                ; fall through whenever data arrives
        wait 0 gpio T0_TIME                     ; wait until start of T0_TIME 
fi_go:
        out pins, 1             [15]            ; send out FI_OE bit from the OSR
                                                ; and wait until after CLK02 has gone low
        wait 1 gpio P_CLK02                     ; wait for CLK02 to go high, start of next bit
        jmp pin, fi_go                          ; when T0_TIME is high go to next bit
                                                ; ISR set to autopull, no need to count
                                                ; fall through upon T0_TIME low, this is the end of the DATA cycle
.wrap                                           ; back to blocking pull when all data is sent 


; total 5 instructions

//
// helper functions for hp41_pio_fiout
//

% c-sdk {
static inline void hp41_pio_fiout_program_init(PIO pio, uint sm, uint offset, 
        uint out_base_pin,              // base for output pin FI_OE
        uint sideset_base_pin,          // base for sideset outputs not used
        uint jmp_pin)                   // pin used in jmp, T0_TIME
    
{
    pio_sm_config c = hp41_pio_fiout_program_get_default_config(offset);

    // set correct pin direction for outputs
    pio_sm_set_consecutive_pindirs(pio, sm, out_base_pin, 1, true);          // pin direction for FI_OE    
    // pio_sm_set_consecutive_pindirs(pio, sm, sideset_base_pin, 1, true);      // sideset not used

    sm_config_set_out_pins(&c, out_base_pin, 1);    // just using 1 output
    // sm_config_set_sideset_pins(&c, sideset_base_pin);  // sideset not used
    sm_config_set_jmp_pin(&c, jmp_pin);  

    // Configure Output Shift Register OSR
    // Shifting to right matches HP41 bit order
    // for DATA output autopull is needed
    sm_config_set_out_shift(
        &c,
        true,   // Shift-to-right = true (lsb first)
        true,   // Autopull = true
        32      // Autopull threshold = 32
    );

    // configure the clock to run at 12.5 MHz, clock divider is 10
    // one clockcycle is now 80 ns
    float clkdiv = 10;
    sm_config_set_clkdiv(&c, clkdiv);

    // connect the pins to the PIO for output
    pio_gpio_init(pio, out_base_pin);               // FI_OE
    // pio_gpio_init(pio, sideset_base_pin);           // Dsideset not used

    // load the configuration and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // and start the pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}

.program hp41_pio_irout

; ****************************************
; **   HP41 PIO interface
; **   state machine for IR output to the infrared LED
; **   (C) 2023 Meindert Kuipers
; ****************************************

; **
; ** autopull the bits from the TX FIFO, threshold set at 30
; ** normally 27 half-bits are sent, allow for 3 extra half bits for the inter-frame delay
; ** bit order for output is MSB first (left shifts out first)

; ** pins used:     
; **    inputs:     CLK01       GPIO12  GPIO07  HP41 CLK01 signal
; **                CLK02       GPIO13  GPIO08  HP41 CLK02 signal
; **                DATA        GPIO16  GPIO09  HP41 DATA signal
; **                ISA         GPIO14  GPIO10  HP41 ISA signal
; **                SYNC        GPIO15  GPIO11  HP41 SYNC signal
; **                T0_TIME     GPIO26, active low signal!
; **                                    is active low during DATA bit D0 between the rising edges of CLK02
; **                                    used to end DATA cycle and to issue the ISA carry bit when requested
; **                                    used for timing FI flag output
; **                SYNC_TIME   GPIO27, active during ISA INSTRUCTION, same as SYNC but at all cycles
; **                                    used for timing ISA INSTRUCTION output
; **   output:      IR_LED      GPIO2,  Infrared LED, this is a sideset output! TEMPORARY!

; **    
; ** out base will be IR_LED (GPIO2 TEMPORARY)

; ** define the fixed signals (cannot be parameters)
.define P_CLK01         12
.define P_CLK02         13
.define P_SYNC          15
.define T0_TIME         26
.define SYNC_TIME       27

.side_set 1                                     ; just one sideset for the IR output
public ir_high:
        out x,1                 side 1          ; wait until data arrives
                                                ; use for IR LED power testing to set it ON all the time
                                                ; send any data to switch the LED off
                                                ; or jump to ir_start
lolo:                                           ; send out the first lo cycle
        nop                     side 0  [13]    ; delay to be timed at 14* 15,2588 usec

.wrap_target         
        nop                     side 0  [11]    ; always the 2nd lo cycle, 
                                                ; delay to be timed at 14* 15,2588 usec
public ir_start:  
        out x,1                 side 0          ; read from TX FIFO into x
        jmp !x, lolo            side 0          ; when X = 0, a lolo sequence is done
                                                ; when x <> 0, a hilo sequence is done
hilo:                                           ; hilo sends out 7 IR pulses, and 7 bit times low
        set x,6                 side 0          ; set X to send out 7 bits
public hilo_loop: 
        nop                     side 1          ; send out high IR pulse of 15,2588 usecs
        jmp x--, hilo_loop      side 0          ; send out low IR pulse of 15,2588 usecs

        .wrap                                   ; free jump to .wrap_target for lo cycle

; total 7 instructions

//
// helper functions for hp41_pio_irout
//

% c-sdk {
static inline void hp41_pio_irout_program_init(PIO pio, uint sm, uint offset, 
        uint out_base_pin,              // base for output pin, not used
        uint sideset_base_pin,          // base for sideset outputs IR_LED
        uint jmp_pin)                   // not used
    
{
    pio_sm_config c = hp41_pio_irout_program_get_default_config(offset);

    // set correct pin direction for sideset IR output
    pio_sm_set_consecutive_pindirs(pio, sm, sideset_base_pin, 1, true);         // pin direction for IR_LED

    sm_config_set_sideset_pins(&c, sideset_base_pin);                           // side set is our IR_LED

    // Configure Output Shift Register OSR
    // Shifting to left is our desired bit order, msb sent out first!
    // autopull is needed for constant output
    sm_config_set_out_shift(
        &c,
        false,  // Shift-to-right = false, MSB is sent out first!
        true,   // Autopull = true
        30      // Autopull threshold = 27 !!
                // normally total 27 half-bits are sent
                // plus 3 additional half bits for the inter-frame delay
    );

    // CPU speed is 125.000.000 Hz (125 MHz)
    // target clock rate is 2*32768 Hz
    // resulting clock divider is 1907,3486
    // after testing the clock divider is 1964, resulting is a clock rate of 63.4 kHz
    // the clock period is now 15,7 usecs

    float clkdiv = 1964.0;  // original
    sm_config_set_clkdiv(&c, clkdiv);

    // connect the pins to the PIO for output
    pio_gpio_init(pio, sideset_base_pin);               // IR_LED

    // load the configuration and jump to the start of the program
    pio_sm_init(pio, sm, offset + hp41_pio_irout_offset_ir_start, &c);          // must use the ir_start entry!

    // and start the pio state machine
    pio_sm_set_enabled(pio, sm, true);
}
%}

